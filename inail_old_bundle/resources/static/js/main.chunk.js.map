{"version":3,"sources":["../external \"React\"","questions/QuestionList.js","questions/QuestionRate.js","questions/QuestionText.js","questions/Survey.js","api/SurveyApi.js","common/Loader.js","common/Feedback.js","questions/SurveyManager.js","admin/SurveyList.js","admin/questions/QuestionListDetails.js","admin/questions/QuestionRateDetails.js","admin/SurveyAnalytics.js","admin/questions/QuestionTextDetails.js","admin/SurveySubmissionList.js","admin/SurveyDetails.js","admin/SurveySubmissionDetails.js","admin/SurveyAdmin.js","index.js","../external \"ReactDOM\""],"names":["module","exports","React","Option","Select","QuestionList","state","values","onChangeValue","value","_this","setState","onValueChange","onChange","e","multipleChoice","props","_e$target","target","checked","index","indexOf","contains","splice","push","_this$props","this","length","_this2","_this$props2","question","options","external_React_default","a","createElement","className","map","item","es_checkbox","key","label","es_select","showSearch","style","width","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","es_radio","Group","Component","defaultProps","id","type","QuestionRate","processProps","_props$maxRate","maxRate","_props$minRate","minRate","quantity","Array","apply","_","nextProps","nextContext","Button","propTypes","PropTypes","string","isRequired","number","TextArea","Input","QuestionText","minLength","maxLength","concat","fontSize","autosize","minRows","questionTypes","list","rate","text","Survey","answers","finished","submit","onSubmit","Object","keys","questionId","_answers$questionId","visible","filter","_ref","_ref2","result","_ref3","valid","stateAnswers","answer","_objectSpread","defineProperty","questions","when","forEach","oldVisible","evaluate","expression","setAnswers","renderQuestion","Question","assign","exec","operator","comparing","Number","shouldRender","undefined","_ref4","hasOwnProperty","divider","padding","paddingTop","es_button","disabled","onClick","config","serviceUrl","token","prepareAxiosConfig","axiosConfig","headers","Authorization","setServiceUrl","setToken","fetchSurvey","asyncToGenerator","regenerator_default","mark","_callee","surveyId","data","wrap","_context","prev","next","axios","get","sent","abrupt","stop","_x","arguments","submitSurvey","_callee2","_context2","post","_x2","_x3","adminListSurveys","_ref6","_callee3","_ref5","_ref5$page","page","_ref7","_context3","_x4","adminListSurveySubmissions","_ref9","_callee4","_ref8","_ref8$page","_ref10","_context4","_x5","_x6","adminDownloadSurveySubmissionsPDF","_ref11","_callee5","submissionIds","downloadLink","_context5","document","href","join","download","click","console","log","Promise","resolve","setTimeout","_x7","_x8","adminGetSurveyDetail","_ref12","_callee6","_ref13","_context6","_x9","adminGetSurveySubmissionDetail","_ref14","_callee7","submissionId","_ref15","_context7","_x10","_x11","adminGetQuestionSubmissions","_ref16","_callee8","_ref17","_context8","require","_x12","_x13","Loader","Feedback","loading","error","onRetry","common_Loader","status","title","subTitle","extra","SurveyManager","loaded","submitting","request","then","success","catch","clearError","fetchData","renderContent","survey","Survey_Survey","spin","tip","payload","SurveyManager_objectSpread","_this$state","Feedback_Feedback","columns","dataIndex","render","row","react_router_dom","to","SurveyList","dataSource","metadata","es_table","rowKey","QuestionListDetails","calculateProgress","Math","floor","random","progress","percent","submissions","card","pagination","showHeader","QuestionRateDetails","average","statistic","precision","es_row","user","col","span","comment","author","content","SurveyAnalytics","external_React_","SurveySubmissionList","exporting","selectedRowKeys","onSelectChange","exportPdf","finish","rowSelection","exportButton","table","TabPane","Tabs","SurveyDetails","match","params","t0","message","tabs","tab","SurveySubmissionList_SurveySubmissionList","SurveyAnalytics_SurveyAnalytics","getSelectedLabels","selectedKeys","opt","answerTypes","answerText","SurveySubmissionDetails_Question","selectedRate","SurveySubmissionDetails","processSubmission","Answer","submission","q","SurveySubmissionDetails_objectSpread","SurveyAdmin","react_router","path","exact","component","EntandoSurvey","mountPoint","appendChild","surveyApi","getAttribute","localStorage","getItem","ReactDOM","HTMLElement","EntandoAdmin","customElements","define"],"mappings":"yEAAAA,EAAAC,QAAAC,qnOCOQC,UAAWC,IAAXD,QAEaE,6MAEnBC,MAAQ,CAAEC,OAAQ,MAElBC,cAAgB,SAAAC,GACdC,EAAKC,SAAS,CAAEF,UAChBC,EAAKE,cAAcH,MAGrBI,SAAW,SAAAC,GAAK,IACNC,EAAmBL,EAAKM,MAAxBD,eACAR,EAAWG,EAAKJ,MAAhBC,OAFMU,EAGaH,EAAEI,OAArBT,EAHMQ,EAGNR,MAAOU,EAHDF,EAGCE,QAEf,GAAIJ,EAAgB,CAClB,IAAMK,EAAQb,EAAOc,QAAQZ,GACvBa,GAAsB,IAAXF,EAEbE,IAAaH,EACfZ,EAAOgB,OAAOH,EAAO,IACXE,GAAYH,GACtBZ,EAAOiB,KAAKf,GAGdC,EAAKC,SAAS,CAAEJ,WAChBG,EAAKE,cAAcL,QAEnBG,EAAKF,cAAcC,iFAITA,GAAO,IAAAgB,EACuBC,KAAKV,MAAvCD,EADWU,EACXV,eAAgBH,EADLa,EACKb,cACpBG,EACFH,EAAcH,EAAOA,EAAMkB,OAAS,GAEpCf,EAAc,CAACH,KAAUA,oCAIpB,IAAAmB,EAAAF,KAAAG,EACuCH,KAAKV,MAA3Cc,EADDD,EACCC,SAAUC,EADXF,EACWE,QAAShB,EADpBc,EACoBd,eAC3B,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYL,GAC1Bf,EACCiB,EAAAC,EAAAC,cAAA,WACGH,EAAQK,IAAI,SAAAC,GAAI,OACfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAUC,IAAKF,EAAKE,IAAKJ,UAAU,SAAS1B,MAAO4B,EAAKE,IAAK1B,SAAUe,EAAKf,UACzEwB,EAAKG,UAKZR,EAAAC,EAAAC,cAAA,WACGH,EAAQJ,OAAS,EAChBK,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,YAAU,EACV7B,SAAUa,KAAKlB,cACfmC,MAAO,CAAEC,MAAO,QAChBC,YAAY,oBACZC,iBAAiB,WACjBC,aAAc,SAACC,EAAOC,GAAR,OAAmBA,EAAOjC,MAAMkC,SAASC,cAAc9B,QAAQ2B,EAAMG,gBAAkB,IAEpGpB,EAAQK,IAAI,SAAAC,GAAI,OACfL,EAAAC,EAAAC,cAAC/B,EAAD,CAAQoC,IAAKF,EAAKE,IAAK9B,MAAO4B,EAAKE,KAChCF,EAAKG,UAKZR,EAAAC,EAAAC,cAACkB,EAAA,EAAMC,MAAP,CAAaxC,SAAUa,KAAKb,SAAUJ,MAAOiB,KAAKpB,MAAMG,OACrDsB,EAAQK,IAAI,SAAAC,GAAI,OACfL,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOb,IAAKF,EAAKE,IAAKJ,UAAU,SAAS1B,MAAO4B,EAAKE,KAClDF,EAAKG,mBA1EgBc,aAkG1CjD,EAAakD,aAAe,CAC1BC,GAAI,GACJC,KAAM,OACN3B,SAAU,GACVf,gBAAgB,EAChBgB,QAAS,wBC1GU2B,6MAEnBpD,MAAQ,CAAEG,MAAO,KAAMF,OAAQ,MAE/BM,SAAW,SAAAC,GAAK,IACNL,EAAUK,EAAEI,OAAZT,MACRC,EAAKC,SAAS,CAAEF,UAChBC,EAAKM,MAAMJ,cAAcH,GAAO,wFAIhCiB,KAAKiC,aAAajC,KAAKV,4CAGZA,GAAO,IAAA4C,EACoB5C,EAA9B6C,eADU,IAAAD,EACA,GADAA,EAAAE,EACoB9C,EAAhB+C,eADJ,IAAAD,EACc,EADdA,EAEZE,EAAWH,EAAUE,EACrBxD,EAAS0D,MAAMC,MAAM,KAAMD,MAAMD,EAAW,IAAI5B,IAAI,SAAC+B,EAAG/C,GAAJ,OAAcA,EAAQ2C,IAChFrC,KAAKf,SAAS,CAAEJ,6DAGQ6D,EAAWC,GACnC3C,KAAKiC,aAAaS,oCAGX,IACCtC,EAAaJ,KAAKV,MAAlBc,SACAvB,EAAWmB,KAAKpB,MAAhBC,OACR,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYL,GAC3BE,EAAAC,EAAAC,cAACkB,EAAA,EAAMC,MAAP,CAAa5C,MAAOiB,KAAKpB,MAAMG,MAAOI,SAAUa,KAAKb,UAClDN,EAAO6B,IAAI,SAAA3B,GAAK,OACfuB,EAAAC,EAAAC,cAACkB,EAAA,EAAMkB,OAAP,CAAc/B,IAAK9B,EAAOA,MAAOA,GAAQA,cAjCX6C,aAyC1CjD,EAAakE,UAAY,CACvBf,GAAIgB,IAAUC,OAAOC,WACrBjB,KAAMe,IAAUC,OAAOC,WACvB5C,SAAU0C,IAAUC,OAAOC,WAC3BX,QAASS,IAAUG,OAAOD,WAC1Bb,QAASW,IAAUG,OAAOD,YAG5BrE,EAAakD,aAAe,CAC1BC,GAAI,GACJC,KAAM,OACN3B,SAAU,GACViC,QAAS,EACTF,QAAS,QCtDHe,SAAaC,EAAbD,SAEaE,6MAEnBxE,MAAQ,CAAEG,MAAO,MAEjBI,SAAW,SAAAC,GAAK,IAAAW,EACuBf,EAAKM,MAAlCJ,EADMa,EACNb,cAAemE,EADTtD,EACSsD,UACftE,EAAUK,EAAEI,OAAZT,MACRC,EAAKC,SAAS,CAAEF,UAChBG,EAAcH,EAAOA,EAAMkB,QAAUoD,4EAG9B,IAAAlD,EACoCH,KAAKV,MAAxCc,EADDD,EACCC,SAAUkD,EADXnD,EACWmD,UAAWD,EADtBlD,EACsBkD,UAC7B,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYL,GAC3BE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACb4C,EAAY,EAAZ,iBAAAE,OAAiCF,EAAjC,eAA0D,MAE7D/C,EAAAC,EAAAC,cAAC0C,EAAD,CACEjC,MAAO,CAAEuC,SAAU,IACnBrE,SAAUa,KAAKb,SACfgC,YAAY,4BACZsC,SAAU,CAAEC,QAAS,GACrBJ,UAAWA,IAEbhD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,GAAA8C,OACMvD,KAAKpB,MAAMG,MAAMkB,OADvB,KAAAsD,OACiCD,YA3BC1B,aAkC1CjD,EAAakE,UAAY,CACvBd,KAAMe,IAAUC,OAAOC,WACvB5C,SAAU0C,IAAUC,OAAOC,WAC3BK,UAAWP,IAAUG,OAAOD,WAC5BM,UAAWR,IAAUG,OAAOD,YAG9BrE,EAAakD,aAAe,CAC1BE,KAAM,OACN3B,SAAU,GACViD,UAAW,EACXC,UAAW,+jBC3Cb,IAAMK,EAAgB,CACpBC,KAAMjF,EACNkF,KAAM7B,EACN8B,KAAMV,GAGaW,6MAEnBnF,MAAQ,CAAEoF,QAAS,GAAIC,UAAU,KAoBjCC,OAAS,WAAM,IACLC,EAAanF,EAAKM,MAAlB6E,SACAH,EAAYhF,EAAKJ,MAAjBoF,QAuBRG,EAtBgBC,OAAOC,KAAKL,GACzBtD,IAAI,SAAA4D,GAAc,IAAAC,EACgBP,EAAQM,GACzC,MAAO,CAAEvC,KAFQwC,EACTxC,KACOhD,MAFEwF,EACHxF,MACQuF,aAAYE,QAFjBD,EACIC,WAGtBC,OAAO,SAAAC,GAAA,OAAAA,EAAGF,UACV9D,IAAI,SAAAiE,GAAiC,IAA9B5C,EAA8B4C,EAA9B5C,KAAMhD,EAAwB4F,EAAxB5F,MACN6F,EAAS,CAAEN,WADmBK,EAAjBL,WACUvC,QAa7B,MARa,SAATA,EACF6C,EAAM,aAAmB7F,EACP,SAATgD,EACT6C,EAAM,WAAiB7F,EACL,SAATgD,IACT6C,EAAM,aAAmB7F,GAGpB6F,QAKb1F,cAAgB,SAAA2F,GAAiB,IAAd/C,EAAc+C,EAAd/C,GAAIjB,EAAUgE,EAAVhE,IACrB,OAAO,SAAC9B,EAAO+F,GACb,IAAMC,EAAe/F,EAAKJ,MAAMoF,QAE1BgB,EAAMC,EAAA,GADQF,EAAajD,IAGjCkD,EAAOF,MAAQA,EACXA,IAAOE,EAAOjG,MAAQA,GAE1B,IAAMiF,EAAOiB,EAAA,GAAQF,EAARX,OAAAc,EAAA,EAAAd,CAAA,GAAuBtC,EAAKkD,IAEzChG,EAAKM,MAAM6F,UAAUV,OAAO,SAAArE,GAAQ,OAAIA,EAASgF,MAAQhF,EAASgF,KAAKhF,WAAaS,IACjFwE,QAAQ,SAAAjF,GACP,IAAM4E,EAAShB,EAAQ5D,EAAS0B,IAC1BwD,EAAaN,EAAOR,QAC1BQ,EAAOR,QAAUxF,EAAKuG,SAASnF,EAASgF,KAAKI,WAAYzG,IACpDuG,GAAcN,EAAOR,UACxBQ,EAAOF,OAAQ,KAIrB9F,EAAKyG,WAAWzB,OAepB0B,eAAiB,SAAAtF,GACf,IAAMuF,EAAWhC,EAAcvD,EAAS2B,MACxC,OAAO4D,GACLrF,EAAAC,EAAAC,cAACmF,EAADvB,OAAAwB,OAAA,CAAU/E,IAAKT,EAAS0B,IAAQ1B,EAAhC,CAA0ClB,cAAeF,EAAKE,cAAckB,SAIhFmF,SAAW,SAACC,EAAYzG,GACtB,IAAM6F,EAAS,wBAAwBiB,KAAKL,GAC5C,GAAIZ,EAAQ,CACV,IAAMkB,EAAWlB,EAAO,GAClBmB,EAAYnB,EAAO,GACzB,OAAQkB,GACN,IAAK,IACH,MAAqB,kBAAV/G,EACFiH,OAAOD,KAAehH,EACL,kBAAVA,EACPgH,IAAchH,KACdA,IAASA,EAAMkB,SACf8F,IAAchH,EAAM,GAE/B,IAAK,KAAM,MAAwB,kBAAVA,EAAqBiH,OAAOD,KAAehH,EAAQgH,IAAchH,EAC1F,IAAK,IAAK,OAAOiH,OAAOD,GAAahH,EACrC,IAAK,IAAK,OAAOiH,OAAOD,GAAahH,EACrC,IAAK,KACL,IAAK,KAAM,OAAOiH,OAAOD,IAAchH,EACvC,QAAS,OAAO,OAKtBkH,aAAe,SAAA7F,GACb,OAAOpB,EAAKJ,MAAMoF,QAAQ5D,EAAS0B,IAAI0C,6FAjHvCxE,KAAKiC,aAAajC,KAAKV,yDAGCoD,EAAWC,GACnC3C,KAAKiC,aAAaS,wCAGPpD,GACX,IAAM0E,EAAU,QACQkC,IAApB5G,EAAM6F,YACR7F,EAAM6F,UAAUE,QAAQ,SAAAc,GAAwB,IAArBrE,EAAqBqE,EAArBrE,GAAIC,EAAiBoE,EAAjBpE,KAAMqD,EAAWe,EAAXf,KACnCpB,EAAQlC,GAAM,CAAEgD,QAASM,EAAMd,WAAYxC,EAAIC,OAAMyC,SAAUY,KAEjEpF,KAAKf,SAAS,CAAE+E,gDAyDTA,GACT,IAAIC,GAAW,EACf,IAAK,IAAIpD,KAAOmD,EACd,GAAIA,EAAQoC,eAAevF,GAAM,CAC/B,IAAMmE,EAAShB,EAAQnD,GACvBoD,GAAYe,EAAOF,QAAUE,EAAOR,QAGxCxE,KAAKf,SAAS,CAAE+E,UAASC,8CAuCzB,OACE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZT,KAAKV,MAAM6F,UAAUV,OAAOzE,KAAKiG,cAAcvF,IAAIV,KAAK0F,gBACzDpF,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,MACA/F,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAAEqF,QAAS,GAAIC,WAAY,IACrCjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAQzE,KAAK,UAAU0E,UAAWzG,KAAKpB,MAAMqF,SAAUyC,QAAS1G,KAAKkE,QAArE,mBA/H0BtC,aAkKpCmC,EAAOlC,aAAe,CACpBsD,UAAW,GACXhB,SAAU,oDCjLNwC,EAAS,CAAEC,WAAY,kBAAmBC,WAAOX,GAEjDY,EAAqB,WACzB,IAAIC,EAAc,GAMlB,OALIJ,EAAOE,QACTE,EAAc,CACZC,QAAS,CAACC,cAAiB,UAAYN,EAAOE,SAG3CE,GAGIG,EAAgB,SAACN,GACxBA,IAAYD,EAAOC,WAAaA,IAGzBO,EAAW,SAACN,GACnBA,IAAOF,EAAOE,MAAQA,IAGfO,EAAW,eAAA1C,EAAAN,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAAC,EAAOC,GAAP,IAAA9C,EAAA+C,EAAA,OAAAJ,EAAA/G,EAAAoH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAF,EAAAE,KAAA,sBAAAF,EAAAE,KAAA,EAKFC,IAAMC,IAAN,GAAAzE,OAAaoD,EAAOC,WAApB,aAAArD,OAA0CkE,GAAYX,KALpD,cAAAnC,EAAAiD,EAAAK,KAKjBP,EALiB/C,EAKjB+C,KALiBE,EAAAM,OAAA,SAMlBR,GANkB,wBAAAE,EAAAO,SAAAX,MAAH,gBAAAY,GAAA,OAAA1D,EAAAlC,MAAAxC,KAAAqI,YAAA,GASXC,EAAY,eAAAzD,EAAAT,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAAgB,EAAOd,EAAUzD,GAAjB,IAAAmC,EAAAuB,EAAA,OAAAJ,EAAA/G,EAAAoH,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAAAU,EAAAV,KAAA,sBAAAU,EAAAV,KAAA,EAKHC,IAAMU,KAAN,GAAAlF,OAAcoD,EAAOC,WAArB,aAAArD,OAA2CkE,EAA3C,gBAAmE,CAAEzD,WAAW8C,KAL7E,cAAAX,EAAAqC,EAAAP,KAKlBP,EALkBvB,EAKlBuB,KALkBc,EAAAN,OAAA,SAMnBR,GANmB,wBAAAc,EAAAL,SAAAI,MAAH,gBAAAG,EAAAC,GAAA,OAAA9D,EAAArC,MAAAxC,KAAAqI,YAAA,GASZO,EAAgB,eAAAC,EAAAzE,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAAuB,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAxB,EAAA,OAAAJ,EAAA/G,EAAAoH,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OAAAkB,EAAAD,EAASE,YAAT,IAAAD,EAAgB,EAAhBA,EAAAG,EAAArB,KAAA,sBAAAqB,EAAArB,KAAA,EAKPC,IAAMC,IAAN,GAAAzE,OAAaoD,EAAOC,WAApB,kBAAArD,OAA+C0F,GAAQnC,KALhD,cAAAoC,EAAAC,EAAAlB,KAKtBP,EALsBwB,EAKtBxB,KALsByB,EAAAjB,OAAA,SAMvBR,GANuB,wBAAAyB,EAAAhB,SAAAW,MAAH,gBAAAM,GAAA,OAAAP,EAAArG,MAAAxC,KAAAqI,YAAA,GAShBgB,EAA0B,eAAAC,EAAAlF,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAAgC,EAAO9B,EAAP+B,GAAA,IAAAC,EAAAR,EAAAS,EAAAhC,EAAA,OAAAJ,EAAA/G,EAAAoH,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OAAA2B,EAAAD,EAAmBP,YAAnB,IAAAQ,EAA0B,EAA1BA,EAAAE,EAAA7B,KAAA,sBAAA6B,EAAA7B,KAAA,EAKjBC,IAAMC,IAAN,GAAAzE,OAAaoD,EAAOC,WAApB,aAAArD,OAA0CkE,EAA1C,sBAAAlE,OAAuE0F,GAAQnC,KAL9D,cAAA4C,EAAAC,EAAA1B,KAKhCP,EALgCgC,EAKhChC,KALgCiC,EAAAzB,OAAA,SAMjCR,GANiC,wBAAAiC,EAAAxB,SAAAoB,MAAH,gBAAAK,EAAAC,GAAA,OAAAP,EAAA9G,MAAAxC,KAAAqI,YAAA,GAS1ByB,EAAiC,eAAAC,EAAA3F,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAAyC,EAAOvC,EAAUwC,GAAjB,IAAAC,EAAA,OAAA5C,EAAA/G,EAAAoH,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,OAAAqC,EAAArC,KAAA,sBAMzCoC,EAAeE,SAAS5J,cAAc,MAC/B6J,KAAb,GAAA9G,OAAuBoD,EAAOC,WAA9B,aAAArD,OAAoDkE,EAApD,sCAAAlE,OAAiG0G,EAAcK,KAAK,MACpHJ,EAAaK,SAAW,oBACxBL,EAAaM,QAEbC,QAAQC,IAAI,kBAAmBR,EAAaG,MAXGF,EAAAjC,OAAA,SAcxC,IAAIyC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAdH,wBAAAT,EAAAhC,SAAA6B,MAAH,gBAAAc,EAAAC,GAAA,OAAAhB,EAAAvH,MAAAxC,KAAAqI,YAAA,GAiBjC2C,EAAoB,eAAAC,EAAA7G,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAA2D,EAAOzD,GAAP,IAAA0D,EAAAzD,EAAA,OAAAJ,EAAA/G,EAAAoH,KAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,OAAAsD,EAAAtD,KAAA,sBAAAsD,EAAAtD,KAAA,EAKXC,IAAMC,IAAN,GAAAzE,OAAaoD,EAAOC,WAApB,aAAArD,OAA0CkE,GAAYX,KAL3C,cAAAqE,EAAAC,EAAAnD,KAK1BP,EAL0ByD,EAK1BzD,KAL0B0D,EAAAlD,OAAA,SAM3BR,GAN2B,wBAAA0D,EAAAjD,SAAA+C,MAAH,gBAAAG,GAAA,OAAAJ,EAAAzI,MAAAxC,KAAAqI,YAAA,GASpBiD,EAA8B,eAAAC,EAAAnH,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAAiE,EAAO/D,EAAUgE,GAAjB,IAAAC,EAAAhE,EAAA,OAAAJ,EAAA/G,EAAAoH,KAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,OAAA6D,EAAA7D,KAAA,sBAAA6D,EAAA7D,KAAA,EAKrBC,IAAMC,IAAN,GAAAzE,OAAaoD,EAAOC,WAApB,aAAArD,OAA0CkE,EAA1C,iBAAAlE,OAAkEkI,GAAgB3E,KAL7D,cAAA4E,EAAAC,EAAA1D,KAKpCP,EALoCgE,EAKpChE,KALoCiE,EAAAzD,OAAA,SAMrCR,GANqC,wBAAAiE,EAAAxD,SAAAqD,MAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAA/I,MAAAxC,KAAAqI,YAAA,GAS9ByD,EAA2B,eAAAC,EAAA3H,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAA/G,EAAAgH,KAAG,SAAAyE,EAAOvE,EAAUnD,GAAjB,IAAA2H,EAAAvE,EAAA,OAAAJ,EAAA/G,EAAAoH,KAAA,SAAAuE,GAAA,cAAAA,EAAArE,KAAAqE,EAAApE,MAAA,cAEvC2C,QAAQC,IAAI,qBAF2BwB,EAAAhE,OAAA,SAGhCiE,EAAQ,MAHwB,cAAAD,EAAApE,KAAA,EAKlBC,IAAMC,IAAN,GAAAzE,OAAaoD,EAAOC,WAApB,kBAAArD,OAA+CkE,EAA/C,aAAAlE,OAAmEe,GAAcwC,KAL/D,cAAAmF,EAAAC,EAAAjE,KAKjCP,EALiCuE,EAKjCvE,KALiCwE,EAAAhE,OAAA,SAMlCR,GANkC,wBAAAwE,EAAA/D,SAAA6D,MAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAAvJ,MAAAxC,KAAAqI,YAAA,GC1FzBiE,EAFA,kBAAMhM,EAAAC,EAAAC,cAAA,0BCKA+L,mLAEV,IAAAxM,EACuCC,KAAKV,MAA3CkN,EADDzM,EACCyM,QAASC,EADV1M,EACU0M,MAAOC,EADjB3M,EACiB2M,QAASlL,EAD1BzB,EAC0ByB,SACjC,OAAIgL,EACKlM,EAAAC,EAAAC,cAACmM,EAAD,MAELF,EAEAnM,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CACEgI,OAAO,QACPC,MAAOJ,EACPK,SAAS,mBACTC,MAAO,CAACzM,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAQE,QAASgG,GAAjB,WAIPlL,WAjB2BI,gkBA6BtC2K,EAAS1K,aAAe,CACtB2K,SAAS,EACTC,MAAO,GACPC,QAAS,aACTlL,SAAU,kBChCSwL,6MACnBpO,MAAQ,CACNqO,QAAQ,EACRT,SAAS,EACTU,YAAY,EACZ/H,UAAW,MAgBbhB,SAAW,SAAAgJ,GAAW,IACZ1F,EAAazI,EAAKM,MAAlBmI,SACRzI,EAAKC,SAAS,CAAEiO,YAAY,IAC5B5E,EAAab,EAAU0F,GACpBC,KAAK,kBAAMpO,EAAKC,SAAS,CAAEoO,SAAS,MACpCC,MAAM,kBAAMtO,EAAKC,SAAS,CAAEwN,MAAO,6BACnCW,KAAK,kBAAMpO,EAAKC,SAAS,CAAEiO,YAAY,SAG5CK,WAAa,WACXvO,EAAKC,SAAS,CAAEwN,MAAO,OAClBzN,EAAKJ,MAAMqO,QACdjO,EAAKwO,eAITC,cAAgB,WACd,IAAMC,EAASpN,EAAAC,EAAAC,cAACmN,EAAD,CAAQxI,UAAWnG,EAAKJ,MAAMuG,UAAWhB,SAAUnF,EAAKmF,WACvE,OAAOnF,EAAKJ,MAAMsO,WACd5M,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAMC,IAAI,qBAAqBH,GAC/BA,sFAhCJ1N,KAAKwN,qKAIG/F,EAAazH,KAAKV,MAAlBmI,SACRzH,KAAKf,SAAS,CAAEuN,SAAS,IACzBpF,EAAYK,GACT2F,KAAK,SAAA1I,GAAA,IAAGoJ,EAAHpJ,EAAGoJ,QAAH,OAAiB5N,EAAKjB,SAAL8O,EAAA,GAAmBD,EAAnB,CAA4Bb,QAAQ,OAC1DK,MAAM,WAAQpN,EAAKjB,SAAS,CAAEwN,MAAO,6BACrCW,KAAK,kBAAMlN,EAAKjB,SAAS,CAAEuN,SAAS,yIA0BhC,IAAAwB,EAC6BhO,KAAKpB,MAAjCyO,EADDW,EACCX,QAASZ,EADVuB,EACUvB,MAAOD,EADjBwB,EACiBxB,QACxB,OAAOa,EACL/M,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAQgI,OAAO,UACPC,MAAM,6CACNC,SAAS,2CAEjBxM,EAAAC,EAAAC,cAACyN,EAAD,CAAUxB,MAAOA,EAAOD,QAASA,EAASE,QAAS1M,KAAKuN,YACrDvN,KAAKyN,sBApD6B7L,aA8D3CoL,EAAcnL,aAAe,CAC3B4F,SAAU,6FChENyG,GAAU,CACd,CACErB,MAAO,QACPsB,UAAW,QACXtN,IAAK,QACLuN,OAAQ,SAACvB,EAAOwB,GAAR,OAAgB/N,EAAAC,EAAAC,cAAC8N,GAAA,EAAD,CAAMC,GAAE,IAAAhL,OAAM8K,EAAIvM,KAAO+K,KAEnD,CACEA,MAAO,cACPsB,UAAW,cACXtN,IAAK,cACLuN,OAAQ,kBAAM,MAEhB,CACEvB,MAAO,cACPsB,UAAW,cACXtN,IAAK,gBAIY2N,8MAEnB5P,MAAQ,CACN4N,SAAS,EACTiC,WAAY,uFAIZzO,KAAKwN,kLAKHxN,KAAKf,SAAS,CAAEuN,SAAS,aACW5D,EAAiB,CAAEK,KAAM,oBAArD6E,YAASY,aACjB1O,KAAKf,SAAS,CAAEwP,WAAYX,EAASY,oCAErC1O,KAAKf,SAAS,CAAEuN,SAAS,gKAK3B,OAAOlM,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAO,KACPH,WAAYzO,KAAKpB,MAAM6P,WACvBjC,QAASxM,KAAKpB,MAAM4N,QACpB0B,QAASA,YAzBatM,yCCtBnBiN,8MACnBC,kBAAoB,WAClB,OAAOC,KAAKC,MAAuB,IAAhBD,KAAKE,aAG1Bf,QAAU,CACR,CACErB,MAAO,SACPsB,UAAW,QACXtN,IAAK,SAEP,CACEgM,MAAO,cACPsB,UAAW,cACXtN,IAAK,sBACLuN,OAAQ,yBAEV,CACEvB,MAAO,cACPsB,UAAW,cACXtN,IAAK,sBACLuN,OAAQ,SAAAC,GAAG,OAAI/N,EAAAC,EAAAC,cAAC0O,GAAA,EAAD,CAAUC,QAASnQ,EAAK8P,kBAAkBT,MACzDnN,MAAO,iFAIF,IAAAnB,EACoCC,KAAKV,MAAxCc,EADDL,EACCK,SAAUC,EADXN,EACWM,QAAS+O,EADpBrP,EACoBqP,YAC3B,OACE9O,EAAAC,EAAAC,cAAC6O,GAAA,EAAD,CAAM5O,UAAU,iBAAiBoM,MAAOzM,EAAU2M,MAAK,GAAAxJ,OAAK6L,EAAL,iBACrD9O,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAO,MACPU,YAAY,EACZC,YAAY,EACZd,WAAYpO,EACZ6N,QAASlO,KAAKkO,kBAlCoBtM,uBCD5B4N,oLACV,IAAAzP,EAC2BC,KAAKV,MAA/Bc,EADDL,EACCK,SAAUgP,EADXrP,EACWqP,YADXjP,EAIsBH,KAAKV,MAC5BmQ,GALCtP,EAICkC,QAJDlC,EAIUgC,SACqB,EAEtC,OACE7B,EAAAC,EAAAC,cAAC6O,GAAA,EAAD,CAAM5O,UAAU,iBAAiBoM,MAAOzM,EAAU2M,MAAK,GAAAxJ,OAAK6L,EAAL,iBACrD9O,EAAAC,EAAAC,cAACkP,GAAA,EAAD,CACE3Q,MAAO0Q,EACPE,UAAW,YAZ4B/N,yCCG3C+B,GAAgB,CACpBC,KAAMiL,GACNhL,KAAM2L,GACN1L,gNCDAlF,MAAQ,CAAE4N,SAAS,sFAGjBxM,KAAKwN,0LAKwBxN,KAAKV,MAAxBgF,eAAYxC,OACpB9B,KAAKf,SAAS,CAAEuN,SAAS,aACWV,EAA4BxH,EAAYxC,mBAApEgM,YAASY,aACjB1O,KAAKf,SAAS,CAAE+E,QAAS8J,EAASY,oCAElC1O,KAAKf,SAAS,CAAEuN,SAAS,gKAIpB,IAAArM,EAC2BH,KAAKV,MAA/Bc,EADDD,EACCC,SAAUgP,EADXjP,EACWiP,YAClB,OACE9O,EAAAC,EAAAC,cAAC6O,GAAA,EAAD,CAAM5O,UAAU,iBAAiBoM,MAAOzM,EAAU2M,MAAK,GAAAxJ,OAAK6L,EAAL,iBACrD9O,EAAAC,EAAAC,cAACoP,GAAA,EAAD,KACG5P,KAAKpB,MAAM4N,QAAUlM,EAAAC,EAAAC,cAACmM,EAAD,MACpB3M,KAAKpB,MAAMoF,QAAQtD,IAAI,SAAAiE,GAAA,IAAG7C,EAAH6C,EAAG7C,GAAI+N,EAAPlL,EAAOkL,KAAM7K,EAAbL,EAAaK,OAAb,OACrB1E,EAAAC,EAAAC,cAACsP,GAAA,EAAD,CAAKjP,IAAKiB,EAAIiO,KAAM,IAClBzP,EAAAC,EAAAC,cAAC6O,GAAA,EAAD,KACE/O,EAAAC,EAAAC,cAACwP,GAAA,EAAD,CACEvP,UAAU,aACVwP,OAAQJ,EACRK,QAAS5P,EAAAC,EAAAC,cAAA,SAAIwE,kBA9BgBpD,cDK5BuO,8MAEnBzK,eAAiB,SAAAtF,GACf,IAAMuF,EAAWhC,GAAcvD,EAAS2B,MACxC,OAAO4D,GACLrF,EAAAC,EAAAC,cAACmF,EAADvB,OAAAwB,OAAA,CAAU/E,IAAKT,EAAS0B,IAAQ1B,EAAhC,CAA0CgP,YAAapQ,EAAKM,MAAMoO,OAAO0B,wFAIpE,IACC1B,EAAW1N,KAAKV,MAAhBoO,OACR,OAAOpN,EAAAC,EAAAC,cAAC4P,EAAA,SAAD,KAAW1C,EAAOvI,UAAUzE,IAAIV,KAAK0F,wBAXH9D,aAuC7CuO,GAAgBtO,aAAe,CAC7B6L,OAAQ,CAAEvI,UAAW,KE1CvB,IAAM+I,GAAU,CACd,CACErB,MAAO,IACPsB,UAAW,eACXtN,IAAK,eACLuN,OAAQ,SAACvB,EAAOwB,GAAR,OAAgB/N,EAAAC,EAAAC,cAAC8N,GAAA,EAAD,CAAMC,GAAE,IAAAhL,OAAM8K,EAAI5G,SAAV,iBAAAlE,OAAkC8K,EAAI5C,eAAiBoB,KAEzF,CACEA,MAAO,OACPsB,UAAW,iBACXtN,IAAK,mBAIYwP,8MAEnBzR,MAAQ,CACN4N,SAAS,EACT8D,WAAW,EACX7B,WAAY,GACZ8B,gBAAiB,MAkBnBC,eAAiB,SAAAD,GACfvR,EAAKC,SAAS,CAAEsR,uBAGlBE,+BAAY,SAAAjJ,IAAA,IAAAC,EAAA,OAAAH,EAAA/G,EAAAoH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACFL,EAAazI,EAAKM,MAAlBmI,SADEG,EAAAC,KAAA,EAGR7I,EAAKC,SAAS,CAAEqR,WAAW,IAHnB1I,EAAAE,KAAA,EAIFgC,EAAkCrC,EAAUzI,EAAKJ,MAAM2R,iBAJrD,cAAA3I,EAAAC,KAAA,EAMR7I,EAAKC,SAAS,CAAEqR,WAAW,IANnB1I,EAAA8I,OAAA,2BAAA9I,EAAAO,SAAAX,EAAA,uGAlBVxH,KAAKwN,oLAKK/F,EAAazH,KAAKV,MAAlBmI,SACRzH,KAAKf,SAAS,CAAEuN,SAAS,aACWnD,EAA2B5B,EAAU,CAAEwB,KAAM,oBAAzE6E,YAASY,aACjB1O,KAAKf,SAAS,CAAEwP,WAAYX,EAASY,oCAErC1O,KAAKf,SAAS,CAAEuN,SAAS,gKAmBpB,IAAAwB,EAC0ChO,KAAKpB,MAA9C2R,EADDvC,EACCuC,gBAAiB9B,EADlBT,EACkBS,WAAYjC,EAD9BwB,EAC8BxB,QAC/BmE,EAAe,CAAEJ,kBAAiBpR,SAAUa,KAAKwQ,gBAEjDI,EACJtQ,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAQzE,KAAK,UAAU0E,UAAW8J,EAAgBtQ,OAAQyG,QAAS1G,KAAKyQ,WAAxE,iBAKII,EACJvQ,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAO,eACP+B,aAAcA,EACdlC,WAAYA,EACZjC,QAASA,EACT0B,QAASA,KAGlB,OACE5N,EAAAC,EAAAC,cAAC4P,EAAA,SAAD,KACE9P,EAAAC,EAAAC,cAAC6O,GAAA,EAAD,CAAMxC,MAAM,cAAcE,MAAO6D,GAC9B5Q,KAAKpB,MAAM0R,UAAYhQ,EAAAC,EAAAC,cAACoN,EAAA,EAAD,CAAMC,IAAI,aAAV,SAAqCgD,WA5DrBjP,aAwElDyO,GAAqBxO,aAAe,CAClC4F,SAAU,eCvFJqJ,GAAYC,KAAZD,QAEaE,8MAEnBpS,MAAQ,CACN4N,SAAS,EACTiC,WAAY,MAGdjB,+BAAY,SAAAhG,IAAA,IAAAyJ,EAAAtM,EAAAmJ,EAAA,OAAAxG,EAAA/G,EAAAoH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACFmJ,EAAUjS,EAAKM,MAAf2R,MADErJ,EAAAC,KAAA,EAGR7I,EAAKC,SAAS,CAAEuN,SAAS,EAAMC,MAAO,KAH9B7E,EAAAE,KAAA,EAIkBkD,EAAqBiG,EAAMC,OAAOpP,IAJpD,OAAA6C,EAAAiD,EAAAK,MAIA6F,EAJAnJ,EAIAmJ,SACAsB,YAAc,IACtBpQ,EAAKC,SAAS,CAAEyO,OAAQI,IANhBlG,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAuJ,GAAAvJ,EAAA,SAQR5I,EAAKC,SAAS,CAAEwN,MAAO7E,EAAAuJ,GAAIC,UARnB,eAAAxJ,EAAAC,KAAA,GAUR7I,EAAKC,SAAS,CAAEuN,SAAS,IAVjB5E,EAAA8I,OAAA,6BAAA9I,EAAAO,SAAAX,EAAA,0BAkBZiG,cAAgB,kBACdnN,EAAAC,EAAAC,cAAC6Q,GAAA,EAAD,KACE/Q,EAAAC,EAAAC,cAACsQ,GAAD,CAASQ,IAAI,YAAYzQ,IAAI,aAC3BP,EAAAC,EAAAC,cAAC+Q,GAAD,CAAsB9J,SAAUzI,EAAKJ,MAAM8O,OAAO5L,MAEpDxB,EAAAC,EAAAC,cAACsQ,GAAD,CAASQ,IAAI,YAAYzQ,IAAI,YAAYI,MAAO,CAAEqF,QAAS,WACxDtH,EAAKJ,MAAM4N,QAAUlM,EAAAC,EAAAC,cAACmM,EAAD,MAAarM,EAAAC,EAAAC,cAACgR,GAAD,CAAiB9D,OAAQ1O,EAAKJ,MAAM8O,+FAT3E1N,KAAKwN,6CAcE,IAAAQ,EACoBhO,KAAKpB,MAAxB4N,EADDwB,EACCxB,QAASC,EADVuB,EACUvB,MACjB,OACEnM,EAAAC,EAAAC,cAACyN,EAAD,CAAUxB,MAAOA,EAAOD,QAASA,EAASE,QAAS1M,KAAKwN,WACrDxN,KAAKyN,sBAxC6B7L,0OAuD3CoP,GAAcnP,aAAe,CAC3BoP,MAAO,CAAEC,OAAQ,CAAEpP,GAAI,MC7DzB,IAAM6D,GAAW,SAAAjB,GAAA,IAAGtE,EAAHsE,EAAGtE,SAAU4E,EAAbN,EAAaM,OAAb,OACf1E,EAAAC,EAAAC,cAAC6O,GAAA,EAAD,CAAM5O,UAAU,iBAAiBoM,MAAOzM,GACtCE,EAAAC,EAAAC,cAAA,WAAMwE,KAIJyM,GAAoB,SAACrR,EAAUsR,GACnC,OAAOA,EAAahR,IAAI,SAAAG,GAAG,OAAIT,EAASC,QACrCoE,OAAO,SAAAkN,GAAG,OAAIA,EAAI9Q,MAAQA,IAAKH,IAAI,SAAAiR,GAAG,OAAIA,EAAI7Q,QAAO,KACrDwJ,KAAK,OAGJsH,GAAc,CAClB9N,KAAM,SAAAa,GAAA,IAAGkN,EAAHlN,EAAGkN,WAAYzR,EAAfuE,EAAevE,SAAf,OAA8BE,EAAAC,EAAAC,cAACsR,GAAD,CAAU1R,SAAUA,EAASA,SAAU4E,OAAQ6M,KACnFjO,KAAM,SAAAiB,GAAA,IAAG6M,EAAH7M,EAAG6M,aAActR,EAAjByE,EAAiBzE,SAAjB,OAAgCE,EAAAC,EAAAC,cAACsR,GAAD,CAAU1R,SAAUA,EAASA,SAAU4E,OAAQyM,GAAkBrR,EAAUsR,MACjH7N,KAAM,SAAAsC,GAAA,IAAG4L,EAAH5L,EAAG4L,aAAc3R,EAAjB+F,EAAiB/F,SAAjB,OAAgCE,EAAAC,EAAAC,cAACsR,GAAD,CAAU1R,SAAUA,EAASA,SAAU4E,OAAQ+M,MAGlEC,8MAEnBpT,MAAQ,CACN4N,SAAS,EACTiC,WAAY,MAWdjB,+BAAY,SAAAhG,IAAA,IAAA0J,EAAAzJ,EAAAgE,EAAA5C,EAAAiF,EAAA,OAAAxG,EAAA/G,EAAAoH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACOoJ,EAAalS,EAAKM,MAA3B2R,MAASC,OACTzJ,EAA2ByJ,EAA3BzJ,SAAUgE,EAAiByF,EAAjBzF,aAFR7D,EAAAC,KAAA,EAIR7I,EAAKC,SAAS,CAAEuN,SAAS,EAAMC,MAAO,KAJ9B7E,EAAAE,KAAA,EAKkBwD,EAA+B7D,EAAUgE,GAL3D,OAAA5C,EAAAjB,EAAAK,KAKA6F,EALAjF,EAKAiF,QACR9O,EAAKiT,kBAAkBnE,GANflG,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAuJ,GAAAvJ,EAAA,SAQR5I,EAAKC,SAAS,CAAEwN,MAAO7E,EAAAuJ,GAAIC,UARnB,eAAAxJ,EAAAC,KAAA,GAUR7I,EAAKC,SAAS,CAAEuN,SAAS,IAVjB5E,EAAA8I,OAAA,6BAAA9I,EAAAO,SAAAX,EAAA,0BAkBZ9B,eAAiB,SAAAV,GACf,IAAMkN,EAASN,GAAY5M,EAAOjD,MAClC,OAAOmQ,GACL5R,EAAAC,EAAAC,cAAC0R,EAAD9N,OAAAwB,OAAA,CAAQ/E,IAAKmE,EAAOV,YAAgBU,sFA7BtBmN,GAAY,IACpBnO,EAAoBmO,EAApBnO,QACAmB,EADoBgN,EAAXzE,OACTvI,UAERnB,EAAQqB,QAAQ,SAAAL,GAAM,OAAIA,EAAO5E,UADTkE,EACmCU,EAAOV,WAD3Ba,EAAUV,OAAO,SAAA2N,GAAC,OAAIA,EAAEtQ,KAAOwC,IAAY,IAA3D,IAACA,IAExBtE,KAAKf,gWAALoT,CAAA,GAAmBF,gDAkBnBnS,KAAKwN,6CAUE,IAAAtN,EAAAF,KAAAgO,EAC6BhO,KAAKpB,MAAjC4N,EADDwB,EACCxB,QAASxI,EADVgK,EACUhK,QAASyI,EADnBuB,EACmBvB,MAC1B,OACEnM,EAAAC,EAAAC,cAACyN,EAAD,CAAUxB,MAAOA,EAAOD,QAASA,EAASE,QAAS1M,KAAKwN,WACrD,kBAAMxJ,EAAQtD,IAAIR,EAAKwF,yBA5CqB9D,aA4DrDoQ,GAAwBnQ,aAAe,CACrCoP,MAAO,CACLC,OAAQ,CACNzJ,SAAU,GACVgE,aAAc,UC1EC6G,oLAEjB,OACEhS,EAAAC,EAAAC,cAAC8N,GAAA,EAAD,KACEhO,EAAAC,EAAAC,cAAC+R,GAAA,EAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWlE,KACxClO,EAAAC,EAAAC,cAAC+R,GAAA,EAAD,CAAOC,KAAK,OAAOC,OAAO,EAAMC,UAAW1B,KAC3C1Q,EAAAC,EAAAC,cAAC+R,GAAA,EAAD,CAAOC,KAAK,uCAAuCE,UAAWV,aAN7BpQ,aCEnC+Q,+LAEF,IAAMC,EAAaxI,SAAS5J,cAAc,OAC1CR,KAAK6S,YAAYD,GAEjBE,EAAwB9S,KAAK+S,aAAa,gBAC1CD,EAAmBE,aAAaC,QAAQ,UAExC,IAAMxL,EAAWzH,KAAK+S,aAAa,aACnCG,IAAS9E,OAAO5P,IAAMgC,cAAcwM,EAAe,CAAEvF,SAAUA,GAAY,MAAOmL,sBAT1DO,cAatBC,+LAEF,IAAMR,EAAaxI,SAAS5J,cAAc,OAC1CR,KAAK6S,YAAYD,GAEjBE,EAAwB9S,KAAK+S,aAAa,gBAC1CD,EAAmBE,aAAaC,QAAQ,UACxCC,IAAS9E,OAAO5P,IAAMgC,cAAc8R,GAAa,GAAI,MAAOM,sBAPrCO,cAW3BE,eAAeC,OAAO,YAAaX,IACnCU,eAAeC,OAAO,kBAAmBF,qBC3CzC9U,EAAAC,QAAA2U","file":"entando-survey/static/js/main.chunk.js","sourcesContent":["module.exports = React;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from 'antd/es/radio';\nimport Checkbox from 'antd/es/checkbox';\nimport Select from 'antd/es/select';\nimport './Question.css';\n\nconst { Option } = Select;\n\nexport default class QuestionList extends Component {\n\n  state = { values: [] };\n\n  onChangeValue = value => {\n    this.setState({ value });\n    this.onValueChange(value);\n  };\n\n  onChange = e => {\n    const { multipleChoice } = this.props;\n    const { values } = this.state;\n    const { value, checked } = e.target;\n\n    if (multipleChoice) {\n      const index = values.indexOf(value);\n      const contains = index !== -1;\n\n      if (contains && !checked) {\n        values.splice(index, 1);\n      } else if (!contains && checked) {\n        values.push(value);\n      }\n\n      this.setState({ values });\n      this.onValueChange(values);\n    } else {\n      this.onChangeValue(value);\n    }\n  };\n\n  onValueChange(value) {\n    const { multipleChoice, onValueChange } = this.props;\n    if (multipleChoice) {\n      onValueChange(value, value.length > 0);\n    } else {\n      onValueChange([value], !!value);\n    }\n  }\n\n  render() {\n    const { question, options, multipleChoice } = this.props;\n    return (\n      <div className=\"question-container\">\n        <div className=\"question\">{question}</div>\n        {multipleChoice ? (\n          <div>\n            {options.map(item => (\n              <Checkbox key={item.key} className=\"option\" value={item.key} onChange={this.onChange}>\n                {item.label}\n              </Checkbox>\n            ))}\n          </div>\n        ): (\n          <div>\n            {options.length > 5 ? (\n              <Select\n                showSearch\n                onChange={this.onChangeValue}\n                style={{ width: '100%' }}\n                placeholder=\"Select one option\"\n                optionFilterProp=\"children\"\n                filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              >\n                {options.map(item => (\n                  <Option key={item.key} value={item.key}>\n                    {item.label}\n                  </Option>\n                ))}\n              </Select>\n            ) : (\n              <Radio.Group onChange={this.onChange} value={this.state.value}>\n                {options.map(item => (\n                  <Radio key={item.key} className=\"option\" value={item.key}>\n                    {item.label}\n                  </Radio>\n                ))}\n              </Radio.Group>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nQuestionList.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n\n  multipleChoice: PropTypes.bool.isRequired,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n  })).isRequired,\n};\n\nQuestionList.defaultProps = {\n  id: '',\n  type: 'list',\n  question: '',\n  multipleChoice: false,\n  options: [],\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from 'antd/es/radio';\nimport './Question.css';\nimport QuestionList from './QuestionList';\n\nexport default class QuestionRate extends Component {\n\n  state = { value: null, values: [] };\n\n  onChange = e => {\n    const { value } = e.target;\n    this.setState({ value });\n    this.props.onValueChange(value, true);\n  };\n\n  componentWillMount() {\n    this.processProps(this.props);\n  }\n\n  processProps(props) {\n    const { maxRate = 10, minRate = 0 } = props;\n    const quantity = maxRate - minRate;\n    const values = Array.apply(null, Array(quantity + 1)).map((_, index) => index + minRate);\n    this.setState({ values });\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.processProps(nextProps);\n  }\n\n  render() {\n    const { question } = this.props;\n    const { values } = this.state;\n    return (\n      <div className=\"question-container\">\n        <div className=\"question\">{question}</div>\n        <Radio.Group value={this.state.value} onChange={this.onChange}>\n          {values.map(value => (\n            <Radio.Button key={value} value={value}>{value}</Radio.Button>\n          ))}\n        </Radio.Group>\n      </div>\n    );\n  }\n}\n\nQuestionList.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n  minRate: PropTypes.number.isRequired,\n  maxRate: PropTypes.number.isRequired,\n};\n\nQuestionList.defaultProps = {\n  id: '',\n  type: 'rate',\n  question: '',\n  minRate: 0,\n  maxRate: 10,\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'antd/es/input';\nimport './Question.css';\nimport QuestionList from './QuestionList';\n\nconst { TextArea } = Input;\n\nexport default class QuestionText extends Component {\n\n  state = { value: '' };\n\n  onChange = e => {\n    const { onValueChange, minLength } = this.props;\n    const { value } = e.target;\n    this.setState({ value });\n    onValueChange(value, value.length >= minLength);\n  };\n\n  render() {\n    const { question, maxLength, minLength } = this.props;\n    return (\n      <div className=\"question-container\">\n        <div className=\"question\">{question}</div>\n        <span className=\"help\">\n          {minLength > 0 ? `Fill at least ${minLength} characters` : null}\n        </span>\n        <TextArea\n          style={{ fontSize: 18 }}\n          onChange={this.onChange}\n          placeholder=\"Describe your answer here\"\n          autosize={{ minRows: 3 }}\n          maxLength={maxLength}\n        />\n        <span className=\"length\">\n          {`${this.state.value.length}/${maxLength}`}\n        </span>\n      </div>\n    );\n  }\n}\n\nQuestionList.propTypes = {\n  type: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n  minLength: PropTypes.number.isRequired,\n  maxLength: PropTypes.number.isRequired,\n};\n\nQuestionList.defaultProps = {\n  type: 'text',\n  question: '',\n  minLength: 1,\n  maxLength: 200,\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'antd/es/button';\nimport Divider from 'antd/es/divider';\nimport QuestionList from './QuestionList';\nimport QuestionRate from './QuestionRate';\nimport QuestionText from './QuestionText';\n\nimport './Survey.css';\n\nconst questionTypes = {\n  list: QuestionList,\n  rate: QuestionRate,\n  text: QuestionText\n};\n\nexport default class Survey extends Component {\n\n  state = { answers: {}, finished: false };\n\n  componentWillMount() {\n    this.processProps(this.props);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.processProps(nextProps);\n  }\n\n  processProps(props) {\n    const answers = {};\n    if (props.questions !== undefined) {\n      props.questions.forEach(({ id, type, when }) => {\n        answers[id] = { valid: !!when, questionId: id, type, visible: !when };\n      });\n      this.setState({ answers });\n    }\n  }\n\n  submit = () => {\n    const { onSubmit } = this.props;\n    const { answers } = this.state;\n    const request = Object.keys(answers)\n      .map(questionId => {\n        const { type, value, visible } = answers[questionId];\n        return { type, value, questionId, visible };\n      })\n      .filter(({ visible }) => visible)\n      .map(({ type, value, questionId }) => {\n        const result = { questionId, type };\n\n        // in the future we will evolve to more than one property\n        // when we have more types, it will make more sense\n        // to create a better archicecture to scale\n        if (type === 'rate') {\n          result['selectedRate'] = value;\n        } else if (type === 'text') {\n          result['answerText'] = value\n        } else if (type === 'list') {\n          result['selectedKeys'] = value\n        }\n\n        return result;\n      });\n    onSubmit(request);\n  };\n\n  onValueChange = ({ id, key }) => {\n    return (value, valid) => {\n      const stateAnswers = this.state.answers;\n      const stateAnswer = stateAnswers[id];\n      const answer = { ...stateAnswer };\n\n      answer.valid = valid;\n      if (valid) answer.value = value;\n\n      const answers = { ...stateAnswers, [id]: answer };\n\n      this.props.questions.filter(question => question.when && question.when.question === key)\n        .forEach(question => {\n          const answer = answers[question.id];\n          const oldVisible = answer.visible;\n          answer.visible = this.evaluate(question.when.expression, value);\n          if (!oldVisible && answer.visible) {\n            answer.valid = false;\n          }\n        });\n\n      this.setAnswers(answers);\n    };\n  };\n\n  setAnswers(answers) {\n    let finished = true;\n    for (let key in answers) {\n      if (answers.hasOwnProperty(key)) {\n        const answer = answers[key];\n        finished &= answer.valid || !answer.visible;\n      }\n    }\n    this.setState({ answers, finished });\n  }\n\n  renderQuestion = question => {\n    const Question = questionTypes[question.type];\n    return Question && (\n      <Question key={question.id} {...question} onValueChange={this.onValueChange(question)} />\n    );\n  };\n\n  evaluate = (expression, value) => {\n    const result = /(!|=|<|>|<=|>=) (.*)/g.exec(expression);\n    if (result) {\n      const operator = result[1];\n      const comparing = result[2];\n      switch (operator) {\n        case '=':\n          if (typeof value === \"number\")\n            return Number(comparing) === value;\n          else if (typeof value === \"string\")\n            return comparing === value;\n          else if (value && value.length)\n            return comparing === value[0];\n          else return false;\n        case '!=': return typeof value === \"number\" ? Number(comparing) !== value : comparing !== value;\n        case '<': return Number(comparing) < value;\n        case '>': return Number(comparing) > value;\n        case '<=': return Number(comparing) >= value;\n        case '>=': return Number(comparing) >= value;\n        default: return false;\n      }\n    }\n  };\n\n  shouldRender = question => {\n    return this.state.answers[question.id].visible;\n  };\n\n  render() {\n    return (\n      <div className=\"survey\">\n        {this.props.questions.filter(this.shouldRender).map(this.renderQuestion)}\n        <Divider />\n        <div style={{ padding: 20, paddingTop: 0 }}>\n          <Button type=\"primary\" disabled={!this.state.finished} onClick={this.submit}>Submit</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nSurvey.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n\n    minRate: PropTypes.number,\n    maxRate: PropTypes.number,\n\n    multipleChoice: PropTypes.bool,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    })),\n\n    maxLength: PropTypes.number,\n    minLength: PropTypes.number,\n\n    when: PropTypes.shape({\n      question: PropTypes.string.isRequired,\n      expression: PropTypes.string.isRequired,\n    }),\n  })).isRequired,\n};\n\n\nSurvey.defaultProps = {\n  questions: [],\n  onSubmit: () => {}\n};","import axios from 'axios';\n\nconst USE_MOCKS = process.env.USE_MOCKS;\nconst config = { serviceUrl: '/entando-survey', token: undefined};\n\nconst prepareAxiosConfig = () => {\n  let axiosConfig = {};\n  if (config.token) {\n    axiosConfig = {\n      headers: {'Authorization': \"Bearer \" + config.token}\n    }\n  }\n  return axiosConfig;\n};\n\nexport const setServiceUrl = (serviceUrl) => {\n  if (serviceUrl) config.serviceUrl = serviceUrl;\n};\n\nexport const setToken = (token) => {\n  if (token) config.token = token;\n}\n\nexport const fetchSurvey = async (surveyId) => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock method\");\n    return require('../__mocks__/survey.json');\n  }\n  const { data } = await axios.get(`${config.serviceUrl}/surveys/${surveyId}`, prepareAxiosConfig());\n  return data;\n};\n\nexport const submitSurvey = async (surveyId, answers) => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock method\");\n    return;\n  }\n  const { data } = await axios.post(`${config.serviceUrl}/surveys/${surveyId}/submissions`, { answers }, prepareAxiosConfig());\n  return data;\n};\n\nexport const adminListSurveys = async ({ page = 1 }) => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock method\");\n    return require('../__mocks__/survey_list.json');\n  }\n  const { data } = await axios.get(`${config.serviceUrl}/surveys?page=${page}`, prepareAxiosConfig());\n  return data;\n};\n\nexport const adminListSurveySubmissions = async (surveyId, { page = 1 }) => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock method\");\n    return require('../__mocks__/survey_submission_list.json');\n  }\n  const { data } = await axios.get(`${config.serviceUrl}/surveys/${surveyId}/submissions?page=${page}`, prepareAxiosConfig());\n  return data;\n};\n\nexport const adminDownloadSurveySubmissionsPDF = async (surveyId, submissionIds) => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock method\");\n    return;\n  }\n\n  const downloadLink = document.createElement('a');\n  downloadLink.href = `${config.serviceUrl}/surveys/${surveyId}/submissions/export?submissionIds=${submissionIds.join(',')}`;\n  downloadLink.download = 'survey_export.pdf';\n  downloadLink.click();\n\n  console.log('Downloading PDF', downloadLink.href);\n\n  // to avoid double clicks\n  return new Promise(resolve => setTimeout(resolve, 500));\n};\n\nexport const adminGetSurveyDetail = async (surveyId) => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock method\");\n    return require('../__mocks__/survey_details.json');\n  }\n  const { data } = await axios.get(`${config.serviceUrl}/surveys/${surveyId}`, prepareAxiosConfig());\n  return data;\n};\n\nexport const adminGetSurveySubmissionDetail = async (surveyId, submissionId) => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock method\");\n    return require('../__mocks__/survey_submission_detail.json');\n  }\n  const { data } = await axios.get(`${config.serviceUrl}/surveys/${surveyId}/submissions/${submissionId}`, prepareAxiosConfig());\n  return data;\n};\n\nexport const adminGetQuestionSubmissions = async (surveyId, questionId) => {\n  if (USE_MOCKS || true) {\n    console.log(\"Using mock method\");\n    return require('../__mocks__/survey_question_text_submissions.json');\n  }\n  const { data } = await axios.get(`${config.serviceUrl}/admin/survey/${surveyId}/answers/${questionId}`, prepareAxiosConfig());\n  return data;\n};\n","import React from 'react';\n\nconst Loader = () => <div>Loading...</div>;\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Result from 'antd/es/result';\nimport Button from 'antd/es/button';\n\nimport Loader from './Loader';\n\nexport default class Feedback extends Component {\n\n  render() {\n    const { loading, error, onRetry, children } = this.props;\n    if (loading) {\n      return <Loader />;\n    }\n    if (error) {\n      return (\n        <Result\n          status=\"error\"\n          title={error}\n          subTitle=\"Please try again\"\n          extra={[<Button onClick={onRetry}>Back</Button>]}\n        />\n      )\n    }\n    return children();\n  }\n\n}\n\nFeedback.propTypes = {\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  onRetry: PropTypes.func.isRequired,\n  children: PropTypes.func.isRequired,\n};\n\nFeedback.defaultProps = {\n  loading: false,\n  error: '',\n  onRetry: () => {},\n  children: () => {},\n};","import React, { Component } from 'react';\nimport Survey from './Survey';\nimport PropTypes from 'prop-types';\nimport Result from 'antd/es/result';\nimport Spin from 'antd/es/spin';\nimport { fetchSurvey, submitSurvey } from '../api/SurveyApi';\nimport Feedback from '../common/Feedback';\n\nexport default class SurveyManager extends Component {\n  state = {\n    loaded: false,\n    loading: false,\n    submitting: false,\n    questions: []\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const { surveyId } = this.props;\n    this.setState({ loading: true });\n    fetchSurvey(surveyId)\n      .then(({ payload }) => this.setState({ ...payload, loaded: true }))\n      .catch(() => { this.setState({ error: 'Something bad happened' })})\n      .then(() => this.setState({ loading: false }));\n  }\n\n  onSubmit = request => {\n    const { surveyId } = this.props;\n    this.setState({ submitting: true });\n    submitSurvey(surveyId, request)\n      .then(() => this.setState({ success: true }))\n      .catch(() => this.setState({ error: 'Something bad happened' }))\n      .then(() => this.setState({ submitting: false }))\n  };\n\n  clearError = () => {\n    this.setState({ error: null });\n    if (!this.state.loaded) {\n      this.fetchData();\n    }\n  };\n\n  renderContent = () => {\n    const survey = <Survey questions={this.state.questions} onSubmit={this.onSubmit} />;\n    return this.state.submitting\n      ? <Spin tip=\"Submitting Survey\">{survey}</Spin>\n      : survey;\n  };\n\n  render() {\n    const { success, error, loading } = this.state;\n    return success ? (\n      <Result status=\"success\"\n              title=\"The survey has been submitted successfully\"\n              subTitle=\"We really appreciate your contribution\" />\n    ) : (\n      <Feedback error={error} loading={loading} onRetry={this.clearError}>\n        {this.renderContent}\n      </Feedback>\n    );\n  }\n}\n\nSurveyManager.propTypes = {\n  surveyId: PropTypes.string.isRequired,\n};\n\nSurveyManager.defaultProps = {\n  surveyId: ''\n};","import React, { Component } from 'react';\nimport { adminListSurveys } from '../api/SurveyApi';\nimport Table from 'antd/es/table';\nimport { Link } from 'react-router-dom';\n\nimport 'antd/lib/table/style/css';\n\nconst columns = [\n  {\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title',\n    render: (title, row) => <Link to={`/${row.id}`}>{title}</Link>\n  },\n  {\n    title: 'Submissions',\n    dataIndex: 'submissions',\n    key: 'submissions',\n    render: () => 376, // TODO submissions from backend\n  },\n  {\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description',\n  },\n];\n\nexport default class SurveyList extends Component {\n\n  state = {\n    loading: false,\n    dataSource: [],\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    try {\n      this.setState({ loading: true });\n      const { payload, metadata } = await adminListSurveys({ page: 1 });\n      this.setState({ dataSource: payload, metadata });\n    } finally {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    return <Table rowKey=\"id\"\n                  dataSource={this.state.dataSource}\n                  loading={this.state.loading}\n                  columns={columns} />;\n  }\n\n}\n","import React, { Component } from 'react';\nimport Progress from 'antd/es/progress';\nimport Card from 'antd/es/card';\nimport Table from 'antd/es/table';\n\nexport default class QuestionListDetails extends Component {\n  calculateProgress = () => {\n    return Math.floor((Math.random() * 100));\n  };\n\n  columns = [\n    {\n      title: 'Option',\n      dataIndex: 'label',\n      key: 'label',\n    },\n    {\n      title: 'Submissions',\n      dataIndex: 'submissions',\n      key: 'submissionsQuantity',\n      render: () => `376` // TODO submissions from backend\n    },\n    {\n      title: 'Submissions',\n      dataIndex: 'submissions',\n      key: 'submissionsProgress',\n      render: row => <Progress percent={this.calculateProgress(row)}  />,\n      width: '100%'\n    },\n  ];\n\n  render() {\n    const { question, options, submissions } = this.props;\n    return (\n      <Card className=\"questionDetail\" title={question} extra={`${submissions} submissions`}>\n        <Table rowKey=\"key\"\n               pagination={false}\n               showHeader={false}\n               dataSource={options}\n               columns={this.columns} />\n      </Card>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Card from 'antd/es/card';\nimport Statistic from 'antd/es/statistic';\n\nexport default class QuestionRateDetails extends Component {\n  render() {\n    const { question, submissions } = this.props;\n\n    // TODO calculate average from backend\n    const { minRate, maxRate } = this.props;\n    const average = (minRate + maxRate) / 2;\n    \n    return (\n      <Card className=\"questionDetail\" title={question} extra={`${submissions} submissions`}>\n        <Statistic\n          value={average}\n          precision={2}\n        />\n      </Card>\n    )\n  }\n}","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport QuestionListDetails from './questions/QuestionListDetails';\nimport QuestionRateDetails from './questions/QuestionRateDetails';\nimport QuestionTextDetails from './questions/QuestionTextDetails';\n\nconst questionTypes = {\n  list: QuestionListDetails,\n  rate: QuestionRateDetails,\n  text: QuestionTextDetails\n};\n\nexport default class SurveyAnalytics extends Component {\n\n  renderQuestion = question => {\n    const Question = questionTypes[question.type];\n    return Question && (\n      <Question key={question.id} {...question} submissions={this.props.survey.submissions}/>\n    );\n  };\n  \n  render() {\n    const { survey } = this.props;\n    return <Fragment>{survey.questions.map(this.renderQuestion)}</Fragment>\n  }\n  \n}\n\nSurveyAnalytics.propTypes = {\n  survey: PropTypes.shape({\n    questions: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      question: PropTypes.string.isRequired,\n\n      minRate: PropTypes.number,\n      maxRate: PropTypes.number,\n\n      multipleChoice: PropTypes.bool,\n      options: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n      })),\n\n      maxLength: PropTypes.number,\n      minLength: PropTypes.number,\n    })).isRequired,\n  }),\n};\n\n\nSurveyAnalytics.defaultProps = {\n  survey: { questions: [] }\n};","import React, { Component } from 'react';\nimport Card from 'antd/es/card';\nimport Row from 'antd/es/row';\nimport Col from 'antd/es/col';\nimport Comment from 'antd/es/comment';\nimport Loader from '../../common/Loader';\nimport { adminGetQuestionSubmissions } from '../../api/SurveyApi';\n\nexport default class QuestionTextDetails extends Component {\n  state = { loading: true };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    try {\n      const { questionId, id } = this.props;\n      this.setState({ loading: true });\n      const { payload, metadata } = await adminGetQuestionSubmissions(questionId, id);\n      this.setState({ answers: payload, metadata });\n    } finally {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    const { question, submissions } = this.props;\n    return (\n      <Card className=\"questionDetail\" title={question} extra={`${submissions} submissions`}>\n        <Row>\n          {this.state.loading ? <Loader/> : (\n            this.state.answers.map(({ id, user, answer }) => (\n              <Col key={id} span={12}>\n                <Card>\n                  <Comment\n                    className=\"answerText\"\n                    author={user}\n                    content={<p>{answer}</p>}\n                  />\n                </Card>\n              </Col>\n            ))\n          )}\n        </Row>\n      </Card>\n    )\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport Table from 'antd/es/table';\nimport Button from 'antd/es/button';\nimport Card from 'antd/es/card';\nimport Spin from 'antd/es/spin';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { adminListSurveySubmissions, adminDownloadSurveySubmissionsPDF } from '../api/SurveyApi';\n\nimport 'antd/lib/table/style/css';\n\nconst columns = [\n  {\n    title: '#',\n    dataIndex: 'submissionId',\n    key: 'submissionId',\n    render: (title, row) => <Link to={`/${row.surveyId}/submissions/${row.submissionId}`}>{title}</Link>\n  },\n  {\n    title: 'Date',\n    dataIndex: 'submissionDate',\n    key: 'submissionDate',\n  },\n];\n\nexport default class SurveySubmissionList extends Component {\n\n  state = {\n    loading: false,\n    exporting: false,\n    dataSource: [],\n    selectedRowKeys: [],\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    try {\n      const { surveyId } = this.props;\n      this.setState({ loading: true });\n      const { payload, metadata } = await adminListSurveySubmissions(surveyId, { page: 1 });\n      this.setState({ dataSource: payload, metadata });\n    } finally {\n      this.setState({ loading: false });\n    }\n  }\n\n  onSelectChange = selectedRowKeys => {\n    this.setState({ selectedRowKeys });\n  };\n\n  exportPdf = async () => {\n    const { surveyId } = this.props;\n    try {\n      this.setState({ exporting: true });\n      await adminDownloadSurveySubmissionsPDF(surveyId, this.state.selectedRowKeys);\n    } finally {\n      this.setState({ exporting: false });\n    }\n\n  };\n\n  render() {\n    const { selectedRowKeys, dataSource, loading } = this.state;\n    const rowSelection = { selectedRowKeys, onChange: this.onSelectChange };\n\n    const exportButton = (\n      <Button type=\"primary\" disabled={!selectedRowKeys.length} onClick={this.exportPdf}>\n        Export as PDF\n      </Button>\n    );\n\n    const table = (\n      <Table rowKey=\"submissionId\"\n             rowSelection={rowSelection}\n             dataSource={dataSource}\n             loading={loading}\n             columns={columns} />\n    );\n\n    return (\n      <Fragment>\n        <Card title=\"Submissions\" extra={exportButton}>\n          {this.state.exporting ? <Spin tip=\"Exporting\">table</Spin> : table}\n        </Card>\n      </Fragment>\n    );\n  }\n\n}\n\nSurveySubmissionList.propTypes = {\n  surveyId: PropTypes.string.isRequired,\n};\n\nSurveySubmissionList.defaultProps = {\n  surveyId: ''\n};","import React, { Component } from 'react';\nimport Tabs from 'antd/es/tabs';\nimport PropTypes from 'prop-types';\nimport Loader from '../common/Loader';\nimport SurveyAnalytics from './SurveyAnalytics';\nimport SurveySubmissionList from './SurveySubmissionList';\nimport { adminGetSurveyDetail } from '../api/SurveyApi';\n\nimport './SurveyDetails.css';\nimport Feedback from '../common/Feedback';\n\nconst { TabPane } = Tabs;\n\nexport default class SurveyDetails extends Component {\n\n  state = {\n    loading: true,\n    dataSource: [],\n  };\n\n  fetchData = async () => {\n    const { match } = this.props;\n    try {\n      this.setState({ loading: true, error: '' });\n      const { payload } = await adminGetSurveyDetail(match.params.id);\n      payload.submissions = 376; // TODO submissions from backend\n      this.setState({ survey: payload });\n    } catch (err) {\n      this.setState({ error: err.message });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n  \n  renderContent = () => (\n    <Tabs>\n      <TabPane tab=\"Responses\" key=\"responses\">\n        <SurveySubmissionList surveyId={this.state.survey.id} />\n      </TabPane>\n      <TabPane tab=\"Analytics\" key=\"analytics\" style={{ padding: '0 15px' }}>\n        {this.state.loading ? <Loader /> : <SurveyAnalytics survey={this.state.survey} />}\n      </TabPane>\n    </Tabs>\n  );\n\n  render() {\n    const { loading, error } = this.state;\n    return (\n      <Feedback error={error} loading={loading} onRetry={this.fetchData}>\n        {this.renderContent}\n      </Feedback>\n    );\n  }\n\n}\n\nSurveyDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nSurveyDetails.defaultProps = {\n  match: { params: { id: '' } }\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'antd/es/card';\nimport { adminGetSurveySubmissionDetail } from '../api/SurveyApi';\n\nimport './SurveyDetails.css';\nimport Feedback from '../common/Feedback';\n\nconst Question = ({ question, answer }) => (\n  <Card className=\"questionDetail\" title={question}>\n    <div>{answer}</div>\n  </Card>\n);\n\nconst getSelectedLabels = (question, selectedKeys) => {\n  return selectedKeys.map(key => question.options\n    .filter(opt => opt.key === key).map(opt => opt.label)[0])\n    .join(', ');\n};\n\nconst answerTypes = {\n  text: ({ answerText, question }) => <Question question={question.question} answer={answerText} />,\n  list: ({ selectedKeys, question }) => <Question question={question.question} answer={getSelectedLabels(question, selectedKeys)} />,\n  rate: ({ selectedRate, question }) => <Question question={question.question} answer={selectedRate} />,\n};\n\nexport default class SurveySubmissionDetails extends Component {\n\n  state = {\n    loading: true,\n    dataSource: [],\n  };\n\n  processSubmission(submission) {\n    const { answers, survey } = submission;\n    const { questions } = survey;\n    const lookupQuestion = (questionId) => questions.filter(q => q.id === questionId)[0];\n    answers.forEach(answer => answer.question = lookupQuestion(answer.questionId));\n    this.setState({ ...submission });\n  }\n\n  fetchData = async () => {\n    const { match: { params } } = this.props;\n    const { surveyId, submissionId } = params;\n    try {\n      this.setState({ loading: true, error: '' });\n      const { payload } = await adminGetSurveySubmissionDetail(surveyId, submissionId);\n      this.processSubmission(payload);\n    } catch (err) {\n      this.setState({ error: err.message });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  renderQuestion = answer => {\n    const Answer = answerTypes[answer.type];\n    return Answer && (\n      <Answer key={answer.questionId} {...answer} />\n    );\n  };\n\n  render() {\n    const { loading, answers, error } = this.state;\n    return (\n      <Feedback error={error} loading={loading} onRetry={this.fetchData}>\n        {() => answers.map(this.renderQuestion)}\n      </Feedback>\n    );\n  }\n\n}\n\nSurveySubmissionDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      surveyId: PropTypes.string.isRequired,\n      submissionId: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nSurveySubmissionDetails.defaultProps = {\n  match: {\n    params: {\n      surveyId: '',\n      submissionId: '' ,\n    }\n  }\n};\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport 'antd/lib/table/style/css';\nimport 'antd/lib/tabs/style/css';\nimport 'antd/lib/card/style/css';\nimport 'antd/lib/progress/style/css';\nimport 'antd/lib/statistic/style/css';\nimport 'antd/lib/row/style/css';\nimport 'antd/lib/col/style/css';\nimport 'antd/lib/comment/style/css';\n\nimport SurveyList from './SurveyList';\nimport SurveyDetails from './SurveyDetails';\nimport SurveySubmissionDetails from './SurveySubmissionDetails';\n\nexport default class SurveyAdmin extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact={true} component={SurveyList} />\n        <Route path=\"/:id\" exact={true} component={SurveyDetails} />\n        <Route path=\"/:surveyId/submissions/:submissionId\" component={SurveySubmissionDetails} />\n      </Router>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'antd/lib/button/style/css';\nimport 'antd/lib/select/style/css';\nimport 'antd/lib/divider/style/css';\nimport 'antd/lib/input/style/css';\nimport 'antd/lib/radio/style/css';\nimport 'antd/lib/checkbox/style/css';\nimport 'antd/lib/result/style/css';\nimport 'antd/lib/spin/style/css';\n\nimport './index.css';\n\nimport SurveyManager from './questions/SurveyManager';\nimport SurveyAdmin from './admin/SurveyAdmin';\nimport * as surveyApi from './api/SurveyApi';\n\nclass EntandoSurvey extends HTMLElement {\n  connectedCallback() {\n    const mountPoint = document.createElement('div');\n    this.appendChild(mountPoint);\n\n    surveyApi.setServiceUrl(this.getAttribute('service-url'));\n    surveyApi.setToken(localStorage.getItem(\"token\"));\n\n    const surveyId = this.getAttribute('survey-id');\n    ReactDOM.render(React.createElement(SurveyManager, { surveyId: surveyId }, null), mountPoint);\n  }\n}\n\nclass EntandoAdmin extends HTMLElement {\n  connectedCallback() {\n    const mountPoint = document.createElement('div');\n    this.appendChild(mountPoint);\n\n    surveyApi.setServiceUrl(this.getAttribute('service-url'));\n    surveyApi.setToken(localStorage.getItem(\"token\"));\n    ReactDOM.render(React.createElement(SurveyAdmin, {}, null), mountPoint);\n  }\n}\n\ncustomElements.define('en-survey', EntandoSurvey);\ncustomElements.define('en-survey-admin', EntandoAdmin);","module.exports = ReactDOM;"],"sourceRoot":""}